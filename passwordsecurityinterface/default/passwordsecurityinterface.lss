
passwordsecurityinterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  0000055a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000f2  000005ec  00000660  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a3  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019b  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078e  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3f       	cpi	r26, 0xFD	; 253
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
 	lcd_command(0x06);    // enter mode/ auto increment mode//
	lcd_command(0x0c);    // display on cursor off
}
void lcd_command(unsigned char com)              //com=command to be used/user defined function//com=0x02
	{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	28 bb       	out	0x18, r18	; 24
	lcd = com & 0xF0;		//send higher bit/D4-D7/data pin

	lcd &= ~(1<<rs); 		//rs =0/compliment 0f 0=1/command mode
  98:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1/en=enable,
  9a:	c3 9a       	sbi	0x18, 3	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	20 ed       	ldi	r18, 0xD0	; 208
  9e:	37 e0       	ldi	r19, 0x07	; 7
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_command+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0/forsending higher bit
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x18>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	4a 95       	dec	r20
  b8:	e1 f7       	brne	.-8      	; 0xb2 <lcd_command+0x20>
  ba:	88 bb       	out	0x18, r24	; 24

	lcd &= ~(1<<rs); 		//rs =0
  bc:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  be:	c3 9a       	sbi	0x18, 3	; 24
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  c6:	c3 98       	cbi	0x18, 3	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0x38>
	_delay_ms(1);
	}
  ce:	08 95       	ret

000000d0 <lcd_init>:
#define D6 PB6
#define D7 PB7


void lcd_init()
{
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);    // home position/test cursor wiill set on initial position
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 	lcd_command(0x06);    // enter mode/ auto increment mode//
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);    // display on cursor off
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  f0:	08 95       	ret

000000f2 <lcd_data>:
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	28 bb       	out	0x18, r18	; 24

	lcd =value & 0xF0;		//send higher bit

	lcd |= (1<<rs); 		//rs =1
  f8:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 106:	c3 98       	cbi	0x18, 3	; 24
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x18>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_data+0x20>
 11a:	88 bb       	out	0x18, r24	; 24

	lcd |= (1<<rs); 		//rs =1
 11c:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
 11e:	c3 9a       	sbi	0x18, 3	; 24
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 126:	c3 98       	cbi	0x18, 3	; 24
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_data+0x38>
	_delay_ms(1);
	}
 12e:	08 95       	ret

00000130 <lcd_clear>:


void lcd_clear(void)
{
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clear+0xa>
lcd_command(0x01);//predifined to clear lcd command
_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <lcd_string>:



void lcd_string(char *str)//pointer
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <lcd_string+0x12>
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	i++;
 150:	1f 5f       	subi	r17, 0xFF	; 255


void lcd_string(char *str)//pointer
{
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
 152:	fe 01       	movw	r30, r28
 154:	e1 0f       	add	r30, r17
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	b9 f7       	brne	.-18     	; 0x14c <lcd_string+0xc>
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
	i++;
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <lcd_number>:

void lcd_number(unsigned int value)
{   /*lcd_ number is used when the data to be displayed is gnerated automatically by some internal functions of controllers like the analog values of sensors converted by the adc of controllers automatically/internally */
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>

	if(value==0)
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	91 f4       	brne	.+36     	; 0x19a <lcd_number+0x34>
	lcd_data(value+48);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 17c:	0e c0       	rjmp	.+28     	; 0x19a <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 17e:	ce 01       	movw	r24, r28
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 97 02 	call	0x52e	; 0x52e <__udivmodhi4>
 188:	80 5d       	subi	r24, 0xD0	; 208
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	value=value/10;
 18e:	ce 01       	movw	r24, r28
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 97 02 	call	0x52e	; 0x52e <__udivmodhi4>
 198:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 19a:	20 97       	sbiw	r28, 0x00	; 0
 19c:	81 f7       	brne	.-32     	; 0x17e <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <keyscan>:
//*****************************************SUBROTINE************************************************



unsigned char keyscan()
{
 1aa:	fe e0       	ldi	r31, 0x0E	; 14
 1ac:	40 e2       	ldi	r20, 0x20	; 32
 1ae:	5e e4       	ldi	r21, 0x4E	; 78
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010));
	   return'4';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '1';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '@';}

	PORTD = 0X0d;//column no. two is taken as output
 1b0:	ed e0       	ldi	r30, 0x0D	; 13
 1b2:	20 e1       	ldi	r18, 0x10	; 16
 1b4:	37 e2       	ldi	r19, 0x27	; 39
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); return '5';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100));
	  return '2';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '0';}

	PORTD = 0X0b;//column no. three is taken as output
 1b6:	7b e0       	ldi	r23, 0x0B	; 11
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010));
	  return '6';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '3';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '=';}											

	PORTD = 0X07;//column no.four is taken as output
 1b8:	67 e0       	ldi	r22, 0x07	; 7

unsigned char keyscan()
{
		while(1)
	{      
	PORTD = 0X0e;// column no.1 is taken as output
 1ba:	f2 bb       	out	0x12, r31	; 18
 1bc:	ca 01       	movw	r24, r20
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <keyscan+0x14>
	_delay_ms(10);  /////must for response at porta when key press
	if((PINA&0b00000001)==0){ return '7';}
 1c2:	c8 99       	sbic	0x19, 0	; 25
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <keyscan+0x20>
 1c6:	87 e3       	ldi	r24, 0x37	; 55
 1c8:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010));
 1ca:	c9 99       	sbic	0x19, 1	; 25
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <keyscan+0x2c>
 1ce:	c9 9b       	sbis	0x19, 1	; 25
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <keyscan+0x24>
 1d2:	84 e3       	ldi	r24, 0x34	; 52
 1d4:	08 95       	ret
	   return'4';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '1';}
 1d6:	ca 99       	sbic	0x19, 2	; 25
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <keyscan+0x38>
 1da:	ca 9b       	sbis	0x19, 2	; 25
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <keyscan+0x30>
 1de:	81 e3       	ldi	r24, 0x31	; 49
 1e0:	08 95       	ret
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '@';}
 1e2:	cb 99       	sbic	0x19, 3	; 25
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <keyscan+0x44>
 1e6:	cb 9b       	sbis	0x19, 3	; 25
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <keyscan+0x3c>
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	08 95       	ret

	PORTD = 0X0d;//column no. two is taken as output
 1ee:	e2 bb       	out	0x12, r30	; 18
 1f0:	c9 01       	movw	r24, r18
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <keyscan+0x48>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001));
 1f6:	c8 99       	sbic	0x19, 0	; 25
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <keyscan+0x58>
 1fa:	c8 9b       	sbis	0x19, 0	; 25
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <keyscan+0x50>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	08 95       	ret
	return '8';}
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); return '5';}
 202:	c9 99       	sbic	0x19, 1	; 25
 204:	04 c0       	rjmp	.+8      	; 0x20e <keyscan+0x64>
 206:	c9 9b       	sbis	0x19, 1	; 25
 208:	fe cf       	rjmp	.-4      	; 0x206 <keyscan+0x5c>
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	08 95       	ret
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100));
 20e:	ca 99       	sbic	0x19, 2	; 25
 210:	04 c0       	rjmp	.+8      	; 0x21a <keyscan+0x70>
 212:	ca 9b       	sbis	0x19, 2	; 25
 214:	fe cf       	rjmp	.-4      	; 0x212 <keyscan+0x68>
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	08 95       	ret
	  return '2';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '0';}
 21a:	cb 99       	sbic	0x19, 3	; 25
 21c:	04 c0       	rjmp	.+8      	; 0x226 <keyscan+0x7c>
 21e:	cb 9b       	sbis	0x19, 3	; 25
 220:	fe cf       	rjmp	.-4      	; 0x21e <keyscan+0x74>
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret

	PORTD = 0X0b;//column no. three is taken as output
 226:	72 bb       	out	0x12, r23	; 18
 228:	c9 01       	movw	r24, r18
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <keyscan+0x80>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001)); return '9';}
 22e:	c8 99       	sbic	0x19, 0	; 25
 230:	04 c0       	rjmp	.+8      	; 0x23a <keyscan+0x90>
 232:	c8 9b       	sbis	0x19, 0	; 25
 234:	fe cf       	rjmp	.-4      	; 0x232 <keyscan+0x88>
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010));
 23a:	c9 99       	sbic	0x19, 1	; 25
 23c:	04 c0       	rjmp	.+8      	; 0x246 <keyscan+0x9c>
 23e:	c9 9b       	sbis	0x19, 1	; 25
 240:	fe cf       	rjmp	.-4      	; 0x23e <keyscan+0x94>
 242:	86 e3       	ldi	r24, 0x36	; 54
 244:	08 95       	ret
	  return '6';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '3';}
 246:	ca 99       	sbic	0x19, 2	; 25
 248:	04 c0       	rjmp	.+8      	; 0x252 <keyscan+0xa8>
 24a:	ca 9b       	sbis	0x19, 2	; 25
 24c:	fe cf       	rjmp	.-4      	; 0x24a <keyscan+0xa0>
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	08 95       	ret
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '=';}											
 252:	cb 99       	sbic	0x19, 3	; 25
 254:	04 c0       	rjmp	.+8      	; 0x25e <keyscan+0xb4>
 256:	cb 9b       	sbis	0x19, 3	; 25
 258:	fe cf       	rjmp	.-4      	; 0x256 <keyscan+0xac>
 25a:	8d e3       	ldi	r24, 0x3D	; 61
 25c:	08 95       	ret

	PORTD = 0X07;//column no.four is taken as output
 25e:	62 bb       	out	0x12, r22	; 18
 260:	c9 01       	movw	r24, r18
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <keyscan+0xb8>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001)); return '/';}
 266:	c8 99       	sbic	0x19, 0	; 25
 268:	04 c0       	rjmp	.+8      	; 0x272 <keyscan+0xc8>
 26a:	c8 9b       	sbis	0x19, 0	; 25
 26c:	fe cf       	rjmp	.-4      	; 0x26a <keyscan+0xc0>
 26e:	8f e2       	ldi	r24, 0x2F	; 47
 270:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); return 'x';}
 272:	c9 99       	sbic	0x19, 1	; 25
 274:	04 c0       	rjmp	.+8      	; 0x27e <keyscan+0xd4>
 276:	c9 9b       	sbis	0x19, 1	; 25
 278:	fe cf       	rjmp	.-4      	; 0x276 <keyscan+0xcc>
 27a:	88 e7       	ldi	r24, 0x78	; 120
 27c:	08 95       	ret
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '-';}
 27e:	ca 99       	sbic	0x19, 2	; 25
 280:	04 c0       	rjmp	.+8      	; 0x28a <keyscan+0xe0>
 282:	ca 9b       	sbis	0x19, 2	; 25
 284:	fe cf       	rjmp	.-4      	; 0x282 <keyscan+0xd8>
 286:	8d e2       	ldi	r24, 0x2D	; 45
 288:	08 95       	ret
    if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '+';}
 28a:	cb 99       	sbic	0x19, 3	; 25
 28c:	96 cf       	rjmp	.-212    	; 0x1ba <keyscan+0x10>
 28e:	cb 9b       	sbis	0x19, 3	; 25
 290:	fe cf       	rjmp	.-4      	; 0x28e <keyscan+0xe4>
 292:	8b e2       	ldi	r24, 0x2B	; 43

	}	  
 }
 294:	08 95       	ret

00000296 <main>:
unsigned char a[5];
unsigned char pas[5]={"12345"};
unsigned int f,m=1,p;
unsigned char keyscan();
int main()
{	
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
    unsigned int i;
	DDRA = 0X00;
 2a6:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0X0FF;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	81 bb       	out	0x11, r24	; 17
	DDRC=0XFF;
 2ac:	84 bb       	out	0x14, r24	; 20
	PORTA= 0XFF;
 2ae:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0XFF;
 2b0:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 2b2:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_init>
 2b6:	08 ec       	ldi	r16, 0xC8	; 200
 2b8:	10 e0       	ldi	r17, 0x00	; 0
			  lcd_data('*');
			 }
         
		 if(a[0]==pas[0]&& a[1]==pas[1]&& a[2]==pas[2]&& a[3]==pas[3]&& a[4]==pas[4])
		  {
		    m=1;
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	ee 2e       	mov	r14, r30
 2be:	f1 2c       	mov	r15, r1
				   lcd_clear();
				   }
				   if(x=='8')
				 { lcd_command(0x80);
				 lcd_string("motor backward");
				   PORTC=0b01010000;
 2c0:	70 e5       	ldi	r23, 0x50	; 80
 2c2:	d7 2e       	mov	r13, r23
				 x=keyscan();
				 lcd_data(x);
				 if(x=='2')
				 { lcd_command(0x80);
				 lcd_string("motor forward");
				   PORTC=0b10100000;
 2c4:	60 ea       	ldi	r22, 0xA0	; 160
 2c6:	c6 2e       	mov	r12, r22
	
  

	while(1)
	{   
	  lcd_command(0x80);
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	    lcd_string("ENTER YOUR");
 2ce:	80 e6       	ldi	r24, 0x60	; 96
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
		lcd_command(0xc0);
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_string("PASSWORD");
 2dc:	8b e6       	ldi	r24, 0x6B	; 107
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 2e4:	84 ef       	ldi	r24, 0xF4	; 244
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	f8 01       	movw	r30, r16
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f0:	d9 f7       	brne	.-10     	; 0x2e8 <main+0x52>
		_delay_ms(50);
		lcd_clear();
 2f2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0;i<5;i++)
		{
	             
			  a[i]=keyscan();
 2fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keyscan>
 2fe:	fe 01       	movw	r30, r28
 300:	e8 50       	subi	r30, 0x08	; 8
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	80 83       	st	Z, r24
			  if(i==0)
 306:	20 97       	sbiw	r28, 0x00	; 0
 308:	31 f4       	brne	.+12     	; 0x316 <main+0x80>
			  {
			  lcd_command(0x01);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			  lcd_data(' ');
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
			  }
			  lcd_data('*');
 316:	8a e2       	ldi	r24, 0x2A	; 42
 318:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	    lcd_string("ENTER YOUR");
		lcd_command(0xc0);
		lcd_string("PASSWORD");
		_delay_ms(50);
		lcd_clear();
		for(i=0;i<5;i++)
 31c:	21 96       	adiw	r28, 0x01	; 1
 31e:	c5 30       	cpi	r28, 0x05	; 5
 320:	d1 05       	cpc	r29, r1
 322:	59 f7       	brne	.-42     	; 0x2fa <main+0x64>
			  lcd_data(' ');
			  }
			  lcd_data('*');
			 }
         
		 if(a[0]==pas[0]&& a[1]==pas[1]&& a[2]==pas[2]&& a[3]==pas[3]&& a[4]==pas[4])
 324:	90 91 f8 00 	lds	r25, 0x00F8
 328:	80 91 ea 00 	lds	r24, 0x00EA
 32c:	98 17       	cp	r25, r24
 32e:	e9 f4       	brne	.+58     	; 0x36a <main+0xd4>
 330:	90 91 f9 00 	lds	r25, 0x00F9
 334:	80 91 eb 00 	lds	r24, 0x00EB
 338:	98 17       	cp	r25, r24
 33a:	b9 f4       	brne	.+46     	; 0x36a <main+0xd4>
 33c:	90 91 fa 00 	lds	r25, 0x00FA
 340:	80 91 ec 00 	lds	r24, 0x00EC
 344:	98 17       	cp	r25, r24
 346:	89 f4       	brne	.+34     	; 0x36a <main+0xd4>
 348:	90 91 fb 00 	lds	r25, 0x00FB
 34c:	80 91 ed 00 	lds	r24, 0x00ED
 350:	98 17       	cp	r25, r24
 352:	59 f4       	brne	.+22     	; 0x36a <main+0xd4>
 354:	90 91 fc 00 	lds	r25, 0x00FC
 358:	80 91 ee 00 	lds	r24, 0x00EE
 35c:	98 17       	cp	r25, r24
 35e:	29 f4       	brne	.+10     	; 0x36a <main+0xd4>
		  {
		    m=1;
 360:	f0 92 f0 00 	sts	0x00F0, r15
 364:	e0 92 ef 00 	sts	0x00EF, r14
 368:	04 c0       	rjmp	.+8      	; 0x372 <main+0xdc>
			}
			else
			{
			  m=0;
 36a:	10 92 f0 00 	sts	0x00F0, r1
 36e:	10 92 ef 00 	sts	0x00EF, r1
			  }
			  if(m==1)
 372:	80 91 ef 00 	lds	r24, 0x00EF
 376:	90 91 f0 00 	lds	r25, 0x00F0
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	09 f0       	breq	.+2      	; 0x382 <main+0xec>
 380:	9a c0       	rjmp	.+308    	; 0x4b6 <__stack+0x57>
			  {
			     lcd_clear();
 382:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				 lcd_command(0x80);
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("PASSWORD MATCHED");
 38c:	84 e7       	ldi	r24, 0x74	; 116
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				 lcd_command(0xc0);
 394:	80 ec       	ldi	r24, 0xC0	; 192
 396:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("access granted");
 39a:	85 e8       	ldi	r24, 0x85	; 133
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 3a2:	84 ef       	ldi	r24, 0xF4	; 244
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	f8 01       	movw	r30, r16
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x112>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ae:	d9 f7       	brne	.-10     	; 0x3a6 <main+0x110>
				 _delay_ms(50);
				 lcd_clear();
 3b0:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				 lcd_data(keyscan());
 3b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keyscan>
 3b8:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 3bc:	88 ee       	ldi	r24, 0xE8	; 232
 3be:	93 e0       	ldi	r25, 0x03	; 3
 3c0:	f8 01       	movw	r30, r16
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <main+0x12a>
				 _delay_ms(100);

				 x=keyscan();
 3ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keyscan>
 3ce:	80 93 f4 00 	sts	0x00F4, r24
 3d2:	10 92 f5 00 	sts	0x00F5, r1
				 lcd_data(x);
 3d6:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
				 if(x=='2')
 3da:	80 91 f4 00 	lds	r24, 0x00F4
 3de:	90 91 f5 00 	lds	r25, 0x00F5
 3e2:	c2 97       	sbiw	r24, 0x32	; 50
 3e4:	91 f4       	brne	.+36     	; 0x40a <main+0x174>
				 { lcd_command(0x80);
 3e6:	80 e8       	ldi	r24, 0x80	; 128
 3e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("motor forward");
 3ec:	84 e9       	ldi	r24, 0x94	; 148
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				   PORTC=0b10100000;
 3f4:	c5 ba       	out	0x15, r12	; 21
 3f6:	88 ee       	ldi	r24, 0xE8	; 232
 3f8:	93 e0       	ldi	r25, 0x03	; 3
 3fa:	f8 01       	movw	r30, r16
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 400:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 402:	d9 f7       	brne	.-10     	; 0x3fa <main+0x164>
				   _delay_ms(100);
				   PORTC=0x00;
 404:	15 ba       	out	0x15, r1	; 21
				   lcd_clear();
 406:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   }
                     if(x=='4')
 40a:	80 91 f4 00 	lds	r24, 0x00F4
 40e:	90 91 f5 00 	lds	r25, 0x00F5
 412:	c4 97       	sbiw	r24, 0x34	; 52
 414:	99 f4       	brne	.+38     	; 0x43c <main+0x1a6>
				 { lcd_command(0x80);
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("motor right");
 41c:	82 ea       	ldi	r24, 0xA2	; 162
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				   PORTC=0b00100000;
 424:	80 e2       	ldi	r24, 0x20	; 32
 426:	85 bb       	out	0x15, r24	; 21
 428:	88 ee       	ldi	r24, 0xE8	; 232
 42a:	93 e0       	ldi	r25, 0x03	; 3
 42c:	f8 01       	movw	r30, r16
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <main+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 432:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 434:	d9 f7       	brne	.-10     	; 0x42c <main+0x196>
				   _delay_ms(100);
				   PORTC=0x00;
 436:	15 ba       	out	0x15, r1	; 21
				   lcd_clear();
 438:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   }
				   if(x=='6')
 43c:	80 91 f4 00 	lds	r24, 0x00F4
 440:	90 91 f5 00 	lds	r25, 0x00F5
 444:	c6 97       	sbiw	r24, 0x36	; 54
 446:	99 f4       	brne	.+38     	; 0x46e <__stack+0xf>
				 { lcd_command(0x80);
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("motor left");
 44e:	8e ea       	ldi	r24, 0xAE	; 174
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				   PORTC=0b10000000;
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	85 bb       	out	0x15, r24	; 21
 45a:	88 ee       	ldi	r24, 0xE8	; 232
 45c:	93 e0       	ldi	r25, 0x03	; 3
 45e:	f8 01       	movw	r30, r16
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 464:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 466:	d9 f7       	brne	.-10     	; 0x45e <main+0x1c8>
				   _delay_ms(100);
				   PORTC=0x00;
 468:	15 ba       	out	0x15, r1	; 21
				   lcd_clear();
 46a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   }
				   if(x=='8')
 46e:	80 91 f4 00 	lds	r24, 0x00F4
 472:	90 91 f5 00 	lds	r25, 0x00F5
 476:	c8 97       	sbiw	r24, 0x38	; 56
 478:	91 f4       	brne	.+36     	; 0x49e <__stack+0x3f>
				 { lcd_command(0x80);
 47a:	80 e8       	ldi	r24, 0x80	; 128
 47c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				 lcd_string("motor backward");
 480:	89 eb       	ldi	r24, 0xB9	; 185
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				   PORTC=0b01010000;
 488:	d5 ba       	out	0x15, r13	; 21
 48a:	88 ee       	ldi	r24, 0xE8	; 232
 48c:	93 e0       	ldi	r25, 0x03	; 3
 48e:	f8 01       	movw	r30, r16
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <__stack+0x31>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 494:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 496:	d9 f7       	brne	.-10     	; 0x48e <__stack+0x2f>
				   _delay_ms(100);
				   PORTC=0x00;
 498:	15 ba       	out	0x15, r1	; 21
				   lcd_clear();
 49a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   }
                        
				 p=0;
 49e:	10 92 f3 00 	sts	0x00F3, r1
 4a2:	10 92 f2 00 	sts	0x00F2, r1
 4a6:	88 ee       	ldi	r24, 0xE8	; 232
 4a8:	93 e0       	ldi	r25, 0x03	; 3
 4aa:	f8 01       	movw	r30, r16
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__stack+0x4d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b2:	d9 f7       	brne	.-10     	; 0x4aa <__stack+0x4b>
 4b4:	09 cf       	rjmp	.-494    	; 0x2c8 <main+0x32>
				 _delay_ms(100);
				 }  
				 else if(m==0)
 4b6:	89 2b       	or	r24, r25
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__stack+0x5d>
 4ba:	06 cf       	rjmp	.-500    	; 0x2c8 <main+0x32>
				 {
				   p++;
 4bc:	80 91 f2 00 	lds	r24, 0x00F2
 4c0:	90 91 f3 00 	lds	r25, 0x00F3
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	90 93 f3 00 	sts	0x00F3, r25
 4ca:	80 93 f2 00 	sts	0x00F2, r24
				   lcd_clear();
 4ce:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   lcd_command(0x80);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				   lcd_string("wrong pasword");
 4d8:	88 ec       	ldi	r24, 0xC8	; 200
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
				   lcd_command(0xc0);
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				   lcd_string("access denied");
 4e6:	86 ed       	ldi	r24, 0xD6	; 214
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 4ee:	88 ee       	ldi	r24, 0xE8	; 232
 4f0:	93 e0       	ldi	r25, 0x03	; 3
 4f2:	f8 01       	movw	r30, r16
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__stack+0x95>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <__stack+0x93>
				   _delay_ms(100);
				   lcd_clear();
 4fc:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				   m=1;
 500:	f0 92 f0 00 	sts	0x00F0, r15
 504:	e0 92 ef 00 	sts	0x00EF, r14
				   if(p==3)
 508:	80 91 f2 00 	lds	r24, 0x00F2
 50c:	90 91 f3 00 	lds	r25, 0x00F3
 510:	03 97       	sbiw	r24, 0x03	; 3
 512:	09 f0       	breq	.+2      	; 0x516 <__stack+0xb7>
 514:	d9 ce       	rjmp	.-590    	; 0x2c8 <main+0x32>
				   {
				      lcd_clear();
 516:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
					  lcd_command(0x80);
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					  lcd_string("error");
 520:	84 ee       	ldi	r24, 0xE4	; 228
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
					  lcd_clear();
 528:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
 52c:	cd ce       	rjmp	.-614    	; 0x2c8 <main+0x32>

0000052e <__udivmodhi4>:
 52e:	aa 1b       	sub	r26, r26
 530:	bb 1b       	sub	r27, r27
 532:	51 e1       	ldi	r21, 0x11	; 17
 534:	07 c0       	rjmp	.+14     	; 0x544 <__udivmodhi4_ep>

00000536 <__udivmodhi4_loop>:
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	a6 17       	cp	r26, r22
 53c:	b7 07       	cpc	r27, r23
 53e:	10 f0       	brcs	.+4      	; 0x544 <__udivmodhi4_ep>
 540:	a6 1b       	sub	r26, r22
 542:	b7 0b       	sbc	r27, r23

00000544 <__udivmodhi4_ep>:
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	5a 95       	dec	r21
 54a:	a9 f7       	brne	.-22     	; 0x536 <__udivmodhi4_loop>
 54c:	80 95       	com	r24
 54e:	90 95       	com	r25
 550:	bc 01       	movw	r22, r24
 552:	cd 01       	movw	r24, r26
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
